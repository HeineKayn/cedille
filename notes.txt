bison -d calc.y
flex calc.l
gcc lex.yy.c calc.tab.c -o an-lex.exe -lfl
./an-lex.exe

-------------------

a faire :
- cnst/variables seulement def dans main
- opérations
- if/else
- while

optionnel :
- pointeur 
- erreurs

-------------------

Questions prof :

- Fonction c'est bizarre, QUAND EST-CE QUE rajoute param dans table de fonc, à définition ou à l'appel ?
- Est-ce que param dans une table spécifique et relié à sa Fonction

- Opérations marche pas, quand est-ce qu'on met la csnt dans l'espace temporaire

(nous)
- Estce que certaines instructions pas avant 
- Là c'est chiant FunctionDef execute Corps qui execute add profondeur et rm profondeur
- peut etre qu'on peut mettre 2x le même nom de var dans functionCall

-------------------

Clean up
Tester : 
    - Ajout à la table
    - Fonctions
    - Calcul

- Rajouter prio à calcul
- Faire les return

-------------------

2 type d'appel de Fonction :
    - normal (avec ;)
    - dans expr
Parametre fonction ? voir bxlr aussi

On fait pas attention au type dans un calcul -> vérifier qu'on met pas un string

Conflict au retour d'une fonction :
    | Expr
    | tVar 
-> Expr contient tVar donc ambiguité
On utilise tVar pour avoir le type

Le if a pas de "CMP" pour vérifier que la valeur est ok

--

déclaration var se fait à l'analyse lexical
-> première fonc va ajouter dans ASM à une adresse mémoire donnée
chaque fonction mettra var à une @ différente
sauf que du coup ça va prendre plein de place mémoire

on voudrait que quand on va dans une fonction on "oublie" les var en la quittant
mais lexer se fait de haut en bas donc on peut pas "simuler le fait de passer dans une fonction"

declaraffect soucis avec declar -> conflict
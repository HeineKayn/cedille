bison -d calc.y
flex calc.l
gcc lex.yy.c calc.tab.c -o an-lex.exe -lfl
./an-lex.exe

-------------------

- finir func 
- ranger le projet

- JMF fait jump si c'est faux (si val = 0)

### prof 
- les > < marchent pas (on fait "addr1 > addr2", faut arriver à choper les valeurs à la place)
- Utiliser INF et SUP en ASM au lieu d'en C
- problèmes de conflict
- faut voir si instruct commencent à 0 ou 1 -> test if_easy et while_easy
(le while saute un cran trop loin pour le JMF du haut)

-------------------

2 type d'appel de Fonction :
    - normal (avec ;)
    - dans expr
Parametre fonction ? voir bxlr aussi

On fait pas attention au type dans un calcul -> vérifier qu'on met pas un string

Conflict au retour d'une fonction :
    | Expr
    | tVar 
-> Expr contient tVar donc ambiguité
On utilise tVar pour avoir le type

----

déclaration var se fait à l'analyse lexical
-> première fonc va ajouter dans ASM à une adresse mémoire donnée
chaque fonction mettra var à une @ différente
sauf que du coup ça va prendre plein de place mémoire

on voudrait que quand on va dans une fonction on "oublie" les var en la quittant
mais lexer se fait de haut en bas donc on peut pas "simuler le fait de passer dans une fonction"

declaraffect soucis avec declar -> conflict